#!/usr/bin/node

const path = require("path");
const { ethers } = require("ethers");

////////////////////////////// MAIN ///////////////////////////////////////////

async function main() {

  // 1.5. calculate reward
  const power1=10n;
  const power2=16n;
  const power3=22n;

  //const maskdice= mask & dice;
  //const rew1 = (maskdice &                                       0b1111111111n)?0n:1n ;
  //const rew2 = (maskdice &                       0b11111111111111110000000000n)?0n:1n ;
  //const rew3 = (dice     & 0b111111111111111111111100000000000000000000000000n)?0n:1n ;
  //const rewardbits = 4n*rew3+2n*rew2+rew1;
  let power=0n;
  for(;power<=power3;power++){
      const mask = (power<=power1)?(((2n**(power1+power2+power3+1n)-1n)<<(power              ))                         )&(2n**(power1+power2+power3+1n)-1n) :
                  ((power<=power2)?(((2n**(       power2+power3+1n)-1n)<<(power+power1       ))|(2n**(power1       )-1n))&(2n**(power1+power2+power3+1n)-1n) :
	                           (((2n**(              power3+1n)-1n)<<(power+power1+power2))|(2n**(power1+power2)-1n))&(2n**(power1+power2+power3+1n)-1n));

      console.log(mask.toString(2),power,2n**power);}
  return 0;
}

main()
  .then((wtns) => {
    //process.stdout.write(wtns);
    process.exit(0);
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

/*
  22                     16               10         
1 1111111111111111111111 1111111111111111 1111111111 0n 1n
1 1111111111111111111111 1111111111111111 1111111110 1n 2n
1 1111111111111111111111 1111111111111111 1111111100 2n 4n
1 1111111111111111111111 1111111111111111 1111111000 3n 8n
1 1111111111111111111111 1111111111111111 1111110000 4n 16n
1 1111111111111111111111 1111111111111111 1111100000 5n 32n
1 1111111111111111111111 1111111111111111 1111000000 6n 64n
1 1111111111111111111111 1111111111111111 1110000000 7n 128n
1 1111111111111111111111 1111111111111111 1100000000 8n 256n
1 1111111111111111111111 1111111111111111 1000000000 9n 512n
1 1111111111111111111111 1111111111111111 0000000000 10n 1024n
1 1111111111111111111111 1111100000000000 1111111111 11n 2048n
1 1111111111111111111111 1111000000000000 1111111111 12n 4096n
1 1111111111111111111111 1110000000000000 1111111111 13n 8192n
1 1111111111111111111111 1100000000000000 1111111111 14n 16384n
1 1111111111111111111111 1000000000000000 1111111111 15n 32768n
1 1111111111111111111111 0000000000000000 1111111111 16n 65536n
1 1111100000000000000000 1111111111111111 1111111111 17n 131072n
1 1111000000000000000000 1111111111111111 1111111111 18n 262144n
1 1110000000000000000000 1111111111111111 1111111111 19n 524288n
1 1100000000000000000000 1111111111111111 1111111111 20n 1048576n
1 1000000000000000000000 1111111111111111 1111111111 21n 2097152n
1 0000000000000000000000 1111111111111111 1111111111 22n 4194304n
*/
